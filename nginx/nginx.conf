worker_processes auto;
events { worker_connections 1024; }

http {
  upstream frontend { server frontend:3000; }
  upstream backend  { server backend:4000; }

  # Redirección HTTP → HTTPS
  server {
    listen 80;
    server_name _;
    
    # Health check para ELB
    location = /_elb_health { return 200; }
    
    # Redirigir todo lo demás a HTTPS
    location / {
      return 301 https://$host$request_uri;
    }
  }

  # Servidor HTTPS con mTLS
  server {
    listen 443 ssl http2;
    server_name _;

    # === CERTIFICADOS DEL SERVIDOR ===
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # === CONFIGURACIÓN mTLS (CERTIFICADOS CLIENTE) ===
    ssl_client_certificate /etc/nginx/certs/ca-clients.crt;
    ssl_verify_client on;
    ssl_verify_depth 3;

    # === CONFIGURACIÓN SSL/TLS ===
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # === CABECERAS SSL PARA BACKEND ===
    proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
    proxy_set_header X-SSL-Client-S-DN $ssl_client_s_dn;
    proxy_set_header X-SSL-Client-I-DN $ssl_client_i_dn;
    proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
    proxy_set_header X-SSL-Client-NotBefore $ssl_client_v_start;
    proxy_set_header X-SSL-Client-NotAfter $ssl_client_v_end;
    proxy_set_header X-SSL-Client-Cert $ssl_client_escaped_cert;
    proxy_set_header X-SSL-Protocol $ssl_protocol;
    proxy_set_header X-SSL-Cipher $ssl_cipher;

    # === CABECERAS ESTÁNDAR ===
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;

    # Health check
    location = /_elb_health { 
      return 200 "OK"; 
      add_header Content-Type text/plain;
    }

    # API Backend
    location ^~ /api/ {
      proxy_pass http://backend;
      proxy_http_version 1.1;
      proxy_redirect off;
      proxy_buffering off;
    }

    # Frontend
    location ^~ /login_cert/ {
      proxy_pass http://frontend;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_buffering off;
      proxy_redirect off;
    }

    # Raíz
    location = / { 
      return 301 /login_cert/; 
    }
  }
}