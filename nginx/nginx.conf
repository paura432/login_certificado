worker_processes auto;
events { worker_connections 1024; }

http {
  upstream frontend { server frontend:3000; }
  upstream backend  { server backend:4000; }

  server {
    listen 80;
    server_name norteverse.trustos.telefonicatech.com;
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl http2;
    server_name norteverse.trustos.telefonicatech.com;

    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # Pide cert a nivel de server (opcional). No lo exige para todo,
    # solo lo validamos en /handshake con el if de abajo.
    ssl_verify_client optional_no_ca;

    # Front (Next con basePath /login_cert)
    location /login_cert/ {
      proxy_pass http://frontend;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_buffering off;
    }

    # Handshake: si el cliente no presentó cert válido → 496
    location = /login_cert/api/handshake {
      if ($ssl_client_verify != SUCCESS) { return 496; }
      proxy_pass http://backend/api/handshake;
      # usa las variables nativas de nginx (no necesitas map)
      proxy_set_header X-SSL-Client-Cert      $ssl_client_escaped_cert;
      proxy_set_header X-SSL-Client-Verify    $ssl_client_verify;
      proxy_set_header X-SSL-Client-Serial    $ssl_client_serial;
      proxy_set_header X-SSL-Client-S-DN      $ssl_client_s_dn;
      proxy_set_header X-SSL-Client-I-DN      $ssl_client_i_dn;
      proxy_set_header X-SSL-Client-NotBefore $ssl_client_v_start;
      proxy_set_header X-SSL-Client-NotAfter  $ssl_client_v_end;
      proxy_set_header X-SSL-Protocol         $ssl_protocol;
      proxy_set_header X-SSL-Cipher           $ssl_cipher;
    }

    # API normal: quita /login_cert antes de pasar al back
    location /login_cert/api/ {
      proxy_pass http://backend/api/;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
    }

    location = / { return 301 /login_cert/; }
  }
}
